CREATE OR REPLACE FUNCTION insert_product(
    product_name VARCHAR(100),
    product_price DECIMAL(10, 2),
    product_quantity INT,
    category_name VARCHAR(100)
)
RETURNS VOID AS
$$
DECLARE
    category_id INT;
BEGIN
    -- Get the category ID based on the category name
    SELECT idCategory INTO category_id
    FROM Categories
    WHERE name = category_name;

    -- If the category does not exist, raise an exception
    IF category_id IS NULL THEN
        RAISE EXCEPTION 'Category % does not exist', category_name;
    END IF;

    -- Insert the product into the Products table
    INSERT INTO Products (Name, price, quantity, idCategory)
    VALUES (product_name, product_price, product_quantity, category_id);
END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION ListProducts()
RETURNS TABLE(idProduct INT, Name VARCHAR, quantity INT, price DECIMAL) AS $$
BEGIN
    RETURN QUERY SELECT idProduct, Name, quantity, price FROM Products;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION FilterProducts(categoryName VARCHAR, priceLimit DECIMAL, minQuantity INT)
RETURNS TABLE(idProduct INT, Name VARCHAR, quantity INT, price DECIMAL) AS $$
BEGIN
    RETURN QUERY
    SELECT p.idProduct, p.Name, p.quantity, p.price
    FROM Products p
    JOIN Product_Category pc ON p.idProduct = pc.ProductId
    JOIN Categories c ON pc.CategoryId = c.idCategory
    WHERE c.name = categoryName AND p.price <= priceLimit AND p.quantity >= minQuantity;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION FilterProductsByCategory(categoryName VARCHAR)
RETURNS TABLE(idProduct INT, Name VARCHAR, quantity INT, price DECIMAL) AS $$
BEGIN
    RETURN QUERY
    SELECT p.idProduct, p.Name, p.quantity, p.price
    FROM Products p
    JOIN Product_Category pc ON p.idProduct = pc.ProductId
    JOIN Categories c ON pc.CategoryId = c.idCategory
    WHERE c.name = categoryName;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION FilterProductsByPrice(priceLimit DECIMAL)
RETURNS TABLE(idProduct INT, Name VARCHAR, quantity INT, price DECIMAL) AS $$
BEGIN
    RETURN QUERY
    SELECT idProduct, Name, quantity, price
    FROM Products
    WHERE price <= priceLimit;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION FilterProductsByQuantity(minQuantity INT)
RETURNS TABLE(idProduct INT, Name VARCHAR, quantity INT, price DECIMAL) AS $$
BEGIN
    RETURN QUERY
    SELECT idProduct, Name, quantity, price
    FROM Products
    WHERE quantity >= minQuantity;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CalculateTotalStockValue()
RETURNS DECIMAL AS $$
DECLARE
    totalValue DECIMAL := 0;
BEGIN
    SELECT SUM(quantity * price) INTO totalValue FROM Products;
    RETURN totalValue;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CalculateCategoryProductCount()
RETURNS TABLE (category_name VARCHAR(100), product_count BIGINT) AS
$$
BEGIN
    RETURN QUERY
    SELECT c.name, COUNT(p.idProduct) AS product_count
    FROM Categories c
    LEFT JOIN Products p ON c.idCategory = p.idCategory
    GROUP BY c.name;
END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GetProductDetails(productId INT)
RETURNS TABLE(ProductName VARCHAR, Quantity INT, Price DECIMAL, Rating INT, Comment TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT p.Name, p.quantity, p.price, r.Rating, r.comment
    FROM Products p
    LEFT JOIN Reviews r ON p.idProduct = r.productId
    WHERE p.idProduct = productId;
END;
$$ LANGUAGE plpgsql;


CREATE OR replace FUNCTION category_with_most_products()
RETURNS TABLE (category_name VARCHAR(50), total_products BIGINT)
AS $$
BEGIN
    RETURN QUERY
    SELECT c.name, COUNT(pc.ProductId) AS total_products
    FROM Categories c
    LEFT JOIN Product_Category pc ON c.idCategory = pc.CategoryId
    GROUP BY c.name
    ORDER BY total_products DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;



CREATE OR replace FUNCTION most_commented_products()
RETURNS TABLE (product_name VARCHAR(100), total_comments BIGINT)
AS $$
BEGIN
    RETURN QUERY
    SELECT p.Name, COUNT(r.idReview) AS total_comments
    FROM Products p
    LEFT JOIN Reviews r ON p.idProduct = r.productId
    GROUP BY p.Name
    ORDER BY total_comments DESC
    LIMIT 10;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION most_demanded_products(start_date DATE, end_date DATE)
RETURNS TABLE (product_name VARCHAR(100), total_quantity BIGINT)
AS $$

BEGIN
    RETURN QUERY
    SELECT p.Name, SUM(oi.quantity) AS total_quantity
    FROM Orders o
    INNER JOIN OrderItem oi ON o.idOrder = oi.OrderId
    INNER JOIN Products p ON oi.ProductId = p.idProduct
    WHERE o.OrderDate BETWEEN start_date AND end_date
    GROUP BY p.Name
    HAVING SUM(oi.quantity) != 0
    ORDER BY total_quantity DESC
    LIMIT 10;
END;

$$ LANGUAGE plpgsql;


CREATE OR replace FUNCTION most_rated_products()
RETURNS TABLE (product_name VARCHAR(100), avg_rating BIGINT)
AS $$

BEGIN
    RETURN QUERY
    SELECT p.Name, AVG(r.Rating) AS avg_rating
    FROM Products p
    LEFT JOIN Reviews r ON p.idProduct = r.productId
    GROUP BY p.Name
    HAVING AVG(r.Rating) IS NOT NULL
    ORDER BY avg_rating DESC
    LIMIT 10;
END;

$$ LANGUAGE plpgsql;


CREATE OR replace FUNCTION most_expensive_and_demanded_products()
RETURNS TABLE (product_name VARCHAR(100), total_quantity BIGINT)
AS $$

BEGIN
    RETURN QUERY
    SELECT p.Name, SUM(oi.quantity) AS total_quantity
    FROM Products p
    INNER JOIN OrderItem oi ON p.idProduct = oi.ProductId
    GROUP BY p.Name
    HAVING SUM(oi.quantity) != 0
    ORDER BY AVG(p.price) DESC, total_quantity DESC
    LIMIT 10;
END;
$$ LANGUAGE plpgsql;